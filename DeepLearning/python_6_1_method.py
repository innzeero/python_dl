# CHAPTER 6 함수 기초

# 6.1 내장 함수와 메서드

# 6.1.1 내장 함수
# 함수는 간단히 말해 처리를 정리한 프로그램이다
# 사용자는 함수를 자유롭게 정의할 수 있으며, 여러 함수가 들어 있는 패키지도 있다
# 이러한 패키지는 라이브러리, 프레임워크 등으로 불린다

# 내장함수란 파이썬에 미리 정의된 함수를 말한다
# 대표적인 예 : print()
# 파이썬에는 이외에도 많은 편리한 내장 함수들이 있다
# 이들을 이용해 효율적으로 프로그램을 작성할 수 있다
# type(), int(), str() 등도 내장함수이다

# 객체(object)는 변수에 할당할 수 있는 요소를 말한다
# 대입되는 값은 '인수'라고 하고 인수를 파라미터라고도 부른다
# 함수에서 인수로 받는 변수의 자료형은 정해져 있다
# len() 함수는 문자열형(str)과 리스트형(list)는 인수로 받을 수 있지만
# 정수형(int), 부동소수점형(float), 불리언형(bool형) 등은 인수로 받을 수 없다
# 함수를 익힐 때 어떤 자료형의 인수를 사용할 수 있는지 확인해두자
# 인수를 확인할 때는 파이썬의 레퍼런스를 참조하는 것이 좋다

# 함수와 변수는 동일한 객체의 개념을 갖고 있다
# 따라서 파이썬에서는 예약어나 내장 함수가 보호되어 있지 않다
# 예약어나 내장 함수명을 그대로 변수명에 사용하면 예약어나 내장 함수가 덮어써지기 때문에 본래의 동작을 하지 못하게 된다
# if나 for 등 코드에서 특별한 의미를 가진 단어, 사전 정의되어 있는 함수명(print, list) 등을
# 변수명으로 사용하면 안 되는 이유도 이 때문이다

# 무네제
vege = "potato"
n = [4, 5, 2, 7, 8]

print(len(vege)) # 6
print(len(n)) # 5


# 6.1.2 메서드
# 메서드는 어떠한 값에 대해 처리를 하는 것이며, '값.메서드명()' 형식으로 기술한다
# 역할은 함수와 동일하다
# 그러나 함수의 경우 처리하려는 값을 ()안에 기입했지만
# 메서드는 값 뒤에 .(점)을 기술한다는 것을 기억!!!
# 함수와 마찬가지로 값의 자료형에 따라 사용할 수 있는 메서드가 다르다

# append()는 리스트형에 사용할 수 있는 메서드이다
alphabet = ["a", "b"]
alphabet.append("c")
print(alphabet)

# 내장함수와 메서드가 같은 처리를 제공하는 경우도 있다
# 내장함수 sorted()와 메서드 sort()가 그 예이다

number = [1, 5, 4, 2, 3]
print(sorted(number)) # [1, 2, 3, 4, 5]
print(number) # [1, 5, 4, 2, 3]
# 내장함수 sorted()를 사용한 경우, 변수의 내용은 즉 number는 그대로이다


number = [1, 5, 4, 2, 3]
number.sort()
print(number) 
# 메서드 sort()를 사용하면 변수의 내용 즉 number의 내용도 바뀐다

# 모든 내장함수-메서드의 관계가 이러하진 않다
# 이처럼 원래 리스트의 내용 자체를 바꿔버리는 메서드인 sort()는
# 프로그래밍 세계에서 파괴적 메서드 destructive method 라고 부르기도 한다

# 6.1.3 문자열형 메서드(upper.count)
# upper()는 모든 문자열을 대문자로 변환하는 메서드
# count()는 ()안에 들어 있는 문자열에 요소가 몇 개 포함되어 있는지 알려주는 메서드
# 사용법 : 변수.upper() , 변수.count()

city = "Seoul"
print(city.upper())
print(city.count("s"))
print(city.count("S"))

# SEOUL
# 0
# 1

# 문제
animal = "elephant"

animal_big = animal.upper()

print(animal)
print(animal_big)
print(animal.count("e"))

# 6.1.4 문자열형 메서드(format)
# 문자열형에는 유용한 format() 메서드가 있다
# format() 메서드는 임의의 값을 대입한 문자열을 생성할 수 있다
# 문자열에 변수를 삽입할 때 자주 사용된다
# 문자열 내에 {}를 포함하는 것이 특징!

print("나는 {}에서 태어나 {}에서 유년기를 보냈다.".format("서울", "안양시"))

# 문제
fruit = "바나나"
color = "노랑색"

print("{}는 {}입니다.".format(fruit, color))

# 6.1.5 리스트형 메서드(index)
# 객체의 인덱스 번호를 찾는 메서드 : index()
# 리스트형에 count() 메서드도 사용 가능

alphabet = ["a", "b", "c", "d", "d"]

print(alphabet.index("b"))
print(alphabet.count("d"))

# 문제
n = [3, 6, 8, 6, 3, 2, 4, 6]
print(n.index(2))
print(n.count(6))

# 6.1.6 리스트형 메서드(sort)
# sort() 메서드는 리스트를 오름차순으로 정렬한다
# reverse() 메서드를 사용하면 리스트 요소의 순서를 반대로 할 수 있다
# sort() 메서드는 리스트 내용이 변경된다
# 그러므로 단순히 정렬된 리스트를 확인하고자 한다면 내장 함수인 sorted()를 사용하는 것이 좋다

# sort() 의 예
num_list = [1, 10, 2, 20]
num_list.sort()
print(num_list)

# reverse() 의 예
hangeul = ["가", "나", "다", "라", "마"]
hangeul.reverse()
print(hangeul) # ['마', '라', '다', '나', '가']

# 문제
n = [53, 26, 37, 69, 24, 2]

n.sort()
print(n) # [2, 24, 26, 37, 53, 69]

n.reverse()
print(n) # [69, 53, 37, 26, 24, 2]

